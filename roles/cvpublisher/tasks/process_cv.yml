---
# Called for each content view in content_views
- name: "Set up the environment"
  ansible.builtin.set_fact:
    exceeded_publication_threshold_hours: false
    hours_since_publication: 0
    current_dt: ""
    cvlp_dt: ""
    publish_content: false

- name: "Get content view info: {{ cv.name }}"
  redhat.satellite.content_view_info:
    username: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    server_url: "{{ satellite_url }}"
    organization: "{{ satellite_organization }}"
    validate_certs: "{{ satellite_validate_certs }}"
    name: "{{ cv.name }}"
  register: cv_info
  changed_when: false

- name: "Determine the datetime"
  ansible.builtin.set_fact:
    current_dt: "{{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"

- name: "Determine last published datetime"
  ansible.builtin.set_fact:
    cvlp_dt: "{{ cv_info.content_view.last_published[:-4] }}"

- name: "Hours since publication"
  ansible.builtin.set_fact:
    hours_since_publication: "{{ (((current_dt | to_datetime) - (cvlp_dt | to_datetime)).total_seconds() / 3600) | int }}"

- name: "Log the hours since last published"
  ansible.builtin.debug:
    var: hours_since_publication

- name: "Determine if we have exceeded publication threshold hours"
  when:
    - cv.publication_threshold_hours is defined
    - (hours_since_publication | float) > (cv.publication_threshold_hours | float)
  ansible.builtin.set_fact:
    exceeded_publication_threshold_hours: true

- name: "Log whether we have exceeded publication threshold hours"
  ansible.builtin.debug:
    var: exceeded_publication_threshold_hours

- name: "If we have exceeded the threshold and skip_publish_all is false, Publish"
  when:
    - exceeded_publication_threshold_hours
    - not skip_publish_all
  ansible.builtin.set_fact:
    publish_content: true

- name: "If we been asked to force publish *this* content view, Publish"
  when: (cv.force_publish is defined and cv.force_publish)
  ansible.builtin.set_fact:
    publish_content: true

- name: "Publishing content view - {{ cv.name }}"
  when: publish_content
  redhat.satellite.content_view_version:
    username: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    server_url: "{{ satellite_url }}"
    organization: "{{ satellite_organization }}"
    validate_certs: "{{ satellite_validate_certs }}"
    content_view: "{{ cv.name }}"
    description: "{{ cv.description | default(omit) }}"
    version: "{{ cv.version | default(omit) }}" # default is a new version
    lifecycle_environments: "{{ cv.environments | default(omit) }}" # underlying default is publish new version to the library
    state: "{{ cv.state | default(omit) }}" # underlying default is present
  async: "{{ cv_publish_timeout | default(14400) }}"
  poll: "{{ cv_publish_retry_interval | default(15) }}"
